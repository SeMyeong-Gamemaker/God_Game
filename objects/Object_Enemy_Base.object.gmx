<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setting===========================================================================================================================================================================================================================================================\\

Enemy_Name = "";

Enemy_Sprite = 0;
Enemy_Sprite_Hit = 0;
Enemy_Sprite_Dead = 0;
Enemy_Sprite_Melee = 0;
Enemy_Sprite_Ranged = 0;
Enemy_Sprite_Charge = 0;

//AI/Movment===========================================================================================================================================================================================================================================================\\

Enemy_Speed = 0;
Enemy_Speed_Max = 0;

Enemy_Knockback = false;
Enemy_Knockback_Power = 0;
Enemy_Knockback_Resistance = 0;

Enemy_Spot_Range = 0;
Enemy_Spot = false;
Enemy_Search = false;

Enemy_Last_X = 0;
Enemy_Last_Y = 0;

Enemy_Path = path_add();
Enemy_Path_Update = false;

Enemy_Wonder = false;

//Attack===========================================================================================================================================================================================================================================================\\

Enemy_Attack = false;

Enemy_Attack_Melee = false;
Enemy_Melee = false;
Enemy_Melee_Damage = 0;
Enemy_Melee_Damage_Max = 0;
Enemy_Melee_Delay = 0;
Enemy_Melee_Attack_Time = 0;
Enemy_Melee_Power = 0;
Enemy_Melee_Power_Max = 0;
Enemy_Melee_Range = 0;
Enemy_Melee_Time = 0;
Enemy_Melee_Available = false;

Enemy_Attack_Ranged = false;
Enemy_Ranged = false;
Enemy_Ranged_Damage = 0;
Enemy_Ranged_Damage_Max = 0;
Enemy_Ranged_Delay = 0;
Enemy_Ranged_Speed = 0;
Enemy_Ranged_Attack_Time = 0;
Enemy_Ranged_Power = 0;
Enemy_Ranged_Power_Max = 0;
Enemy_Ranged_Range = 0;
Enemy_Ranged_Time = 0;
Enemy_Ranged_Available = false;
Enemy_Ranged_Slowdown = 0;
Enemy_Ranged_Amount = 0;
Enemy_Ranged_Spread = 0;
Enemy_Ranged_Projectile = noone;

Enemy_Attack_Charge = false;
Enemy_Charge = false;
Enemy_Charge_Damage = 0;
Enemy_Charge_Damage_Max = 0;
Enemy_Charge_Delay = 0;
Enemy_Charge_Speed = 0;
Enemy_Charge_Power = 0;
Enemy_Charge_Power_Max = 0;
Enemy_Charge_Range = 0;
Enemy_Charge_Time = 0;
Enemy_Charge_Available = false;
Enemy_Charge_Slowdown = 0;

//Health===========================================================================================================================================================================================================================================================\\

Enemy_Health_Max = 0;
Enemy_Health = Enemy_Health_Max;
Enemy_Dead = false;

Enemy_Damaged = 0;

//Drop===========================================================================================================================================================================================================================================================\\

Enemy_Item_Drop[0] = 0;
Enemy_Item_Drop_Chance[0] = 0;
Enemy_Item_Drop_Amount[0] = 0;

Enemy_Exp_Drop = 0;
Enemy_Exp_Drop_Amount = 0;

//Misc===========================================================================================================================================================================================================================================================\\

Enemy_Hit_Id = noone;
Enemy_Attack_Id = noone;

//Effect===========================================================================================================================================================================================================================================================\\

Enemy_Font = font_add_sprite( Sprite_Font_5, ord( '!' ), true, 1 );

Enemy_Tag = ( ( string_length( Enemy_Name ) * 5 ) + ( string_length( Enemy_Name ) - 2 ) ) / 2;

Enemy_Hit_Particle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack == true &amp;&amp; Enemy_Dead == false ) {
    
    if( Enemy_Attack_Ranged == true ) {
    
        Enemy_Ranged = true;

        repeat( Enemy_Ranged_Amount ) {
        
            with( instance_create( x, y, Enemy_Ranged_Projectile ) ) {
            
                Projectile_Friction = other.Enemy_Ranged_Slowdown;
                Projectile_Speed = other.Enemy_Ranged_Speed;
                Projectile_Damage = other.Enemy_Ranged_Damage_Max;
                Projectile_Power = other.Enemy_Ranged_Power_Max;
                motion_add( point_direction( x, y, Object_Player.x, Object_Player.y ) + random_range( -other.Enemy_Ranged_Spread, other.Enemy_Ranged_Spread ), Projectile_Speed );
                image_angle = direction;
            
            }
        
        }
        
        Enemy_Ranged = false;
        Enemy_Attack = false;
        Enemy_Attack_Id = noone;
        sprite_index = Enemy_Sprite;

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack_Ranged == true ) {
    
    if( Enemy_Ranged == false ) {
    
        Enemy_Ranged_Available = true;
        
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack == true &amp;&amp; Enemy_Dead == false ) {
    
    if( Enemy_Attack_Melee == true ) {

        Enemy_Melee = true;
        if( distance_to_object( Object_Player ) &lt;= Enemy_Melee_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) ) {
        
            Enemy_Melee_Damage = Enemy_Melee_Damage_Max;
            Enemy_Melee_Power = Enemy_Melee_Power_Max;
            with( Object_Player ) {
            
                global.Player_Knockback = true;
                sprite_index = global.Player_Sprite_Hit;
    
                if( global.Player_Weapon_Block == false ) {
    
                    global.Player_Damaged = other.Enemy_Melee_Damage + random( other.Enemy_Melee_Damage * 0.05 ) - global.Player_Defence;
        
                    if( other.Enemy_Melee_Power &gt; 10 ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 ); }
                    else { motion_set( point_direction( x, y, other.x, other.y ) - 180, other.Enemy_Melee_Power ); }
        
                }
                else{
    
                    global.Player_Damaged = other.Enemy_Melee_Damage + random( other.Enemy_Melee_Damage * 0.05 ) - ( round( global.Player_Defence * sqrt( 1 + global.Player_Skill_Block_Level ) * 100 ) / 100 );
        
                    if( other.Enemy_Melee_Power / ( 1 + global.Player_Knockback_Resistance ) &gt; 10 / ( 1 + global.Player_Knockback_Resistance ) ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 / ( 1 + global.Player_Knockback_Resistance ) ); }
                    else { motion_set( point_direction( x, y, other.x, other.y ) - 180, other.Enemy_Melee_Power / ( 1 + global.Player_Knockback_Resistance ) ); }
    
                }
    
                if( global.Player_Damaged &lt; 1 ) { global.Player_Damaged = 1; }
                global.Player_Health -= global.Player_Damaged;
                global.Player_Healing = false;
    
                other.Enemy_Attack_Id = id;
    
                global.Camera_Shake += 10 * ( global.Player_Damaged / global.Player_Health_Max );
                global.Camera_Shake += other.Enemy_Melee_Power / ( 1 + global.Player_Knockback_Resistance );
    
                with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Text ) ) {
    
                    Effect_Direction = 90 + random_range( -15, 15 );
                    Effect_Font = font_add_sprite( Sprite_Font_5, ord( '!' ), true, 1 );
                    Effect_Text = string( global.Player_Damaged );
                    Effect_Color = c_red;
        
                }
    
                alarm[2] = -1;
                
            }
        
        }
        Enemy_Melee = false;
        Enemy_Attack = false;
        Enemy_Attack_Id = noone;
        sprite_index = Enemy_Sprite;

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack_Melee == true ) {
    
    if( Enemy_Melee == false ) {
    
        Enemy_Melee_Available = true;
        
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack == true &amp;&amp; Enemy_Dead == false ) {
    
    if( Enemy_Attack_Charge == true ) {

        motion_add( point_direction( x, y, Object_Player.x, Object_Player.y ), Enemy_Charge_Speed );
        Enemy_Charge = true;

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Enemy_Attack_Charge == true ) {

    Enemy_Charge_Available = true;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving===========================================================================================================================================================================================================================================================\\

if( instance_exists( Object_Player ) &amp;&amp; Enemy_Dead == false ) {
    
    if( distance_to_object( Object_Player ) &lt;= Enemy_Spot_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) ) {
    
        Enemy_Spot = true;
        Enemy_Search = false;
        Enemy_Path_Update = false;
    
    }
    
    if( Enemy_Spot == true ) {
    
        if( distance_to_object( Object_Player ) &lt;= Enemy_Spot_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) ) {
    
            if( Enemy_Attack == false &amp;&amp; Enemy_Knockback == false &amp;&amp; distance_to_object( Object_Player ) &gt; Enemy_Melee_Range ) { mp_potential_step( Object_Player.x, Object_Player.y, Enemy_Speed, false ); }
            path_end();
            Enemy_Last_X = Object_Player.x;
            Enemy_Last_Y = Object_Player.y;
            Enemy_Path_Update = false;
            Enemy_Search = false;
    
        }
        else if( !collision_line( x, y, Enemy_Last_X, Enemy_Last_Y, Object_Prop_Base, false, true ) &amp;&amp; !place_meeting( Enemy_Last_X, Enemy_Last_Y,Object_Prop_Base ) &amp;&amp; Enemy_Attack == false &amp;&amp; Enemy_Knockback == false ) {
        
            mp_potential_step( Enemy_Last_X, Enemy_Last_Y, Enemy_Speed, false );
            path_end();
            Enemy_Search = true;
            if( x == Enemy_Last_X &amp;&amp; y == Enemy_Last_Y ) { 
            
                Enemy_Spot = false;
                Enemy_Search = false;
                Enemy_Path_Update = false;
                
            }
        
        }
        else if( collision_line( x, y, Enemy_Last_X, Enemy_Last_Y, Object_Prop_Base, false, true ) &amp;&amp; !place_meeting( Enemy_Last_X, Enemy_Last_Y, Object_Prop_Base ) &amp;&amp; Enemy_Attack == false &amp;&amp; Enemy_Knockback == false ) {

            if( Enemy_Path_Update == false ) {
            
                mp_grid_path( global.Grid, Enemy_Path, x, y, Enemy_Last_X, Enemy_Last_Y, true )
                Enemy_Path_Update = true;
                if( x == Enemy_Last_X &amp;&amp; y == Enemy_Last_Y ) { 
            
                    Enemy_Spot = false;
                    Enemy_Search = false;
                    Enemy_Path_Update = false;
                
                }
            
            }
            if( Enemy_Path_Update == true ) {
            
                path_start( Enemy_Path, Enemy_Speed, path_action_stop, false );
                if( ( x == Enemy_Last_X &amp;&amp; y == Enemy_Last_Y ) || path_position == 1 ) { 
            
                    Enemy_Spot = false;
                    Enemy_Search = false;
                    Enemy_Path_Update = false;
                
                }
                
            }
         
        }
    
    }
    
    if( Enemy_Spot == false &amp;&amp; Enemy_Search == false &amp;&amp; Enemy_Path_Update == false &amp;&amp; Enemy_Attack == false) {
    
        Enemy_Wonder = true;
    
    }
    else { Enemy_Wonder = false; }
    
}

round(x);
round(y);

depth = -y - 500;

//Attack=========================================================================================================================================================================================================================================================\\

if( Enemy_Attack == false &amp;&amp; Enemy_Dead == false ) {
    
    if( Enemy_Attack == false &amp;&amp; distance_to_object( Object_Player ) &lt;= Enemy_Melee_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) &amp;&amp; Enemy_Attack_Melee == true &amp;&amp; Enemy_Melee == false &amp;&amp; Enemy_Melee_Available == true ) {
    
        sprite_index = Enemy_Sprite_Melee;
        Enemy_Melee_Available = false;
        alarm[3] = Enemy_Melee_Delay;
        alarm[2] = Enemy_Melee_Time;
        Enemy_Attack = true;
    
    }
    
    if( Enemy_Attack == false &amp;&amp; distance_to_object( Object_Player ) &lt;= Enemy_Ranged_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) &amp;&amp; Enemy_Attack_Ranged == true &amp;&amp; Enemy_Ranged == false &amp;&amp; Enemy_Ranged_Available == true ) {
    
        sprite_index = Enemy_Sprite_Ranged;
        Enemy_Ranged_Available = false;
        alarm[5] = Enemy_Ranged_Delay;
        alarm[4] = Enemy_Ranged_Time;
        Enemy_Attack = true;
    
    }

    if( Enemy_Attack == false &amp;&amp; distance_to_object( Object_Player ) &lt;= Enemy_Charge_Range &amp;&amp; !collision_line( x, y, Object_Player.x, Object_Player.y, Object_Prop_Base, false, true ) &amp;&amp; Enemy_Attack_Charge == true &amp;&amp; Enemy_Charge == false &amp;&amp; Enemy_Charge_Available == true ) {
    
        sprite_index = Enemy_Sprite_Charge;
        Enemy_Charge_Available = false;
        alarm[1] = Enemy_Charge_Delay;
        alarm[0] = Enemy_Charge_Time;
        Enemy_Attack = true;
    
    }

}

if( Enemy_Attack == true &amp;&amp; Enemy_Dead == false ) {

    if( Enemy_Attack == true &amp;&amp; Enemy_Attack_Charge == true &amp;&amp; Enemy_Charge == true ) {
    
        friction = Enemy_Charge_Slowdown;
        Enemy_Charge_Damage = round( Enemy_Charge_Damage_Max * ( speed / Enemy_Charge_Speed ) * 100 ) / 100;
        Enemy_Charge_Power = round( Enemy_Charge_Power_Max * ( speed / Enemy_Charge_Speed ) * 100 ) / 100;
    
        if( place_meeting( x + lengthdir_x( max( sprite_width, sprite_height ) / 2, direction ), y + lengthdir_y( max( sprite_width, sprite_height ) / 2, direction ), Object_Prop_Base ) ) {
    
            move_bounce_solid( false );
            Enemy_Charge = false;
            Enemy_Attack = false;
            Enemy_Attack_Id = noone;
                   
            Enemy_Knockback = true;
            sprite_index = Enemy_Sprite_Hit;
        
        }  
    
        if( speed == 0 ) { 
        
            Enemy_Charge = false;
            Enemy_Attack = false;
            Enemy_Attack_Id = noone;
            sprite_index = Enemy_Sprite;
        
        }
    
    }

}

//Knockback=========================================================================================================================================================================================================================================================\\

if( Enemy_Knockback == true ){
        
    friction = Enemy_Knockback_Resistance;
        
    if( speed = 0 ) {
        
        Enemy_Knockback = false;
        sprite_index = Enemy_Sprite;
        
    }
    
}

//Health=========================================================================================================================================================================================================================================================\\

if( global.Player_Weapon_Attack == false ) {
    
    Enemy_Hit_Id = noone;
    
}

if( Enemy_Dead == true ) {

    sprite_index = Enemy_Sprite_Dead;
    image_alpha -= 0.1 / room_speed;
    if( image_alpha &lt;= 0 ) {

        path_end();
        path_delete( Enemy_Path );
        instance_destroy();
    
    }

}

//Misc=========================================================================================================================================================================================================================================================\\

if( direction &gt; 90 &amp;&amp; direction &lt;= 270 ) { image_xscale = 1; }
if( direction &gt; 270 || direction &lt;= 90 ) { image_xscale = -1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Prop_Base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid( false );

//Knockback=========================================================================================================================================================================================================================================================\\

if( Enemy_Knockback == true ){
        
    friction = Enemy_Knockback_Resistance;
          
    if( speed = 0 ) {
        
        Enemy_Knockback = false;
        sprite_index = Enemy_Sprite;
        
    }
    
}

//Attack=========================================================================================================================================================================================================================================================\\

if( Enemy_Attack_Charge == true &amp;&amp; Enemy_Charge == true ) {
    
    Enemy_Charge = false;
    Enemy_Attack = false;
    Enemy_Attack_Id = noone;
        
    Enemy_Knockback = true;
    sprite_index = Enemy_Sprite_Hit;
        
    if( speed == 0 ) { 
        
        Enemy_Charge = false;
        Enemy_Attack = false;
        Enemy_Attack_Id = noone;
        sprite_index = Enemy_Sprite;
        
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Player_Weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.Player_Weapon_Attack == true &amp;&amp; global.Player_Weapon_Charge == false &amp;&amp; Enemy_Hit_Id != other.id ) {

    if( Enemy_Attack == true ) {

        Enemy_Attack = false;
        if( Enemy_Attack_Melee == true ) {
    
            Enemy_Melee = false;
            Enemy_Attack = false;
            Enemy_Attack_Id = noone;
            speed = 0;
    
        }
    
        if( Enemy_Attack_Charge == true ) {
    
            Enemy_Charge = false;
            Enemy_Attack = false;
            Enemy_Attack_Id = noone;
            speed = 0;
    
        }
    
    }
    
    Enemy_Knockback = true;
    if( Enemy_Knockback_Power * global.Player_Weapon_Damage + random( global.Player_Weapon_Damage * 0.05 ) &gt; 5 ) { motion_set( Object_Player_Weapon.image_angle, 5 ); }
    else { motion_set( Object_Player_Weapon.image_angle, Enemy_Knockback_Power * global.Player_Weapon_Damage + random( global.Player_Weapon_Damage * 0.05 ) ); }
    
    sprite_index = Enemy_Sprite_Hit;
    
    Enemy_Hit_Id = other.id;
    
    Enemy_Damaged = global.Player_Weapon_Damage + random( global.Player_Weapon_Damage * 0.05 );
    Enemy_Health -= Enemy_Damaged;
    if( Enemy_Dead == false ) {
    
        with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Text ) ) {
    
            Effect_Direction = 90 + random_range( -15, 15 );
            Effect_Font = font_add_sprite( Sprite_Font_5, ord( '!' ), true, 1 );
            Effect_Text = string( other.Enemy_Damaged );
            Effect_Color = c_black;
        
        }
    
    }
    repeat( irandom_range( 3, 5 ) ) { instance_create( x, y, Enemy_Hit_Particle ); }
    global.Camera_Shake += 1;
    
    if( Enemy_Health &lt;= 0 ) {

        if( Enemy_Dead == false ) {
    
            for( var Choose = 0; Choose &lt; array_length_1d( Enemy_Item_Drop ); Choose++; ) {
        
                repeat( Enemy_Item_Drop_Amount[Choose] ) {
                
                    if( irandom( 100 ) &lt;= Enemy_Item_Drop_Chance[Choose] ) {
        
                        with( instance_create( x, y, Enemy_Item_Drop[Choose] ) ) { motion_add( random(360), random( 5 ) ); }
            
                    }
                    
                }
        
            }
        
            repeat( Enemy_Exp_Drop_Amount )
            {
                with( instance_create( x, y, Object_Item_Exp ) ) {
                    
                    Item_Exp = other.Enemy_Exp_Drop;
                    motion_add( random(360), random( 5 ) );
                    
                }
                    
            }
    
        }
    
        Enemy_Dead = true;
        Enemy_Charge = false;
        Enemy_Attack = false;
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha( 1 );
if( sprite_index &gt; -1 ) { draw_self(); }
draw_set_valign( fa_middle );
draw_set_halign( fa_center );
draw_set_font( Enemy_Font );
if( object_exists( Object_Player ) ) {

    if( distance_to_object( Object_Player ) &lt;= 128 &amp;&amp; Enemy_Dead == false &amp;&amp; sprite_index &gt; -1 ) {
    
        draw_set_alpha( 0.2 );
        draw_rectangle_colour( x - 2 - Enemy_Tag , y + ( sprite_height / 2 ) + 2, x + Enemy_Tag,  y + ( sprite_height / 2 ) + 8, c_black, c_black, c_black, c_black, false );
        draw_text_colour( x, y + ( sprite_height / 2 ) + 5, Enemy_Name, c_white, c_white, c_white, c_white, 1 );
        if( Enemy_Health_Max &gt; Enemy_Health ) {
    
            draw_rectangle_colour( x - 2 - Enemy_Tag , y + ( sprite_height / 2 ) + 10, x + Enemy_Tag,  y + ( sprite_height / 2 ) + 16, c_red, c_red, c_red, c_red, false );
            draw_text_colour( x, y + ( sprite_height / 2 ) + 13, string( Enemy_Health ) + " / " + string( Enemy_Health_Max ), c_white, c_white, c_white, c_white, 1 );
    
        }

    }
    
}
if( sprite_index &gt; -1 ) { draw_sprite_ext( sprite_index, -1, x, y + ( sprite_height / 2 ), image_xscale, 0.2, 0, c_black, 0.2 * image_alpha ); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
