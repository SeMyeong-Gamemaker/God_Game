<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sprite_Player_270</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create( x, y, Object_Player_Weapon );

if( global.Portal == noone ) { x = 224; y = 640; }
if( global.Portal == "Object_Prop_Portal_room2_room3" ) { x = 32; y = 672; }
if( global.Portal == "Object_Prop_Portal_room3_room2" ) { x = 2528; y = 768; }

if( global.Portal == "Object_Prop_Portal_room3_room4" ) { x = 32; y = 704; }
if( global.Portal == "Object_Prop_Portal_room4_room3" ) { x = 2528; y = 576; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Player_Healing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Player_Weapon_Attack = false;
global.Player_Weapon_Charge = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Player_Weapon_Charge = true;
alarm[1] = global.Player_Weapon_Recharge;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving===========================================================================================================================================================================================================================================================\\

if( global.Player_Knockback == false ) {

    if( keyboard_check( ord( 'W' ) ) &amp;&amp; !keyboard_check( ord( 'S' ) ) ) {

        if( keyboard_check( ord( 'A' ) ) &amp;&amp; !keyboard_check( ord( 'D' ) ) ) { global.Player_Direction = 135; }
        else if( keyboard_check( ord( 'D' ) ) &amp;&amp; !keyboard_check( ord( 'A' ) ) ) { global.Player_Direction = 45; }
        else if( keyboard_check( ord( 'W' ) ) ) { global.Player_Direction = 90; }
    
        global.Player_Speed_Current = global.Player_Speed;
        if( !place_meeting( x + lengthdir_x( global.Player_Speed_Current, global.Player_Direction ), y + lengthdir_y( global.Player_Speed_Current, global.Player_Direction ), Object_Prop_Base ) ) {
    
            x += lengthdir_x( global.Player_Speed_Current, global.Player_Direction );
            y += lengthdir_y( global.Player_Speed_Current, global.Player_Direction );
        
        }

    }

    if( keyboard_check( ord( 'S' ) ) &amp;&amp; !keyboard_check( ord( 'W' ) ) ) {

        if( keyboard_check( ord( 'A' ) ) &amp;&amp; !keyboard_check( ord( 'D' ) ) ) { global.Player_Direction = 225; }
        else if( keyboard_check( ord( 'D' ) ) &amp;&amp; !keyboard_check( ord( 'A' ) ) ) { global.Player_Direction = 315; }
        else if( keyboard_check( ord( 'S' ) ) ) { global.Player_Direction = 270; }
    
        global.Player_Speed_Current = global.Player_Speed;
        if( !place_meeting( x + lengthdir_x( global.Player_Speed_Current, global.Player_Direction ), y + lengthdir_y( global.Player_Speed_Current, global.Player_Direction ), Object_Prop_Base ) ) {
    
            x += lengthdir_x( global.Player_Speed_Current, global.Player_Direction );
            y += lengthdir_y( global.Player_Speed_Current, global.Player_Direction );
        
        }

    }

    if( keyboard_check( ord( 'D' ) ) &amp;&amp; !keyboard_check( ord( 'A' ) ) &amp;&amp; !keyboard_check( ord( 'W' ) ) &amp;&amp; !keyboard_check( ord( 'S' ) ) ) {

        global.Player_Direction = 0;
        global.Player_Speed_Current = global.Player_Speed;
        if( !place_meeting( x + lengthdir_x( global.Player_Speed_Current, global.Player_Direction ), y + lengthdir_y( global.Player_Speed_Current, global.Player_Direction ), Object_Prop_Base ) ) {
    
            x += lengthdir_x( global.Player_Speed_Current, global.Player_Direction );
            y += lengthdir_y( global.Player_Speed_Current, global.Player_Direction );
        
        }

    }

    if( keyboard_check( ord( 'A' ) ) &amp;&amp; !keyboard_check( ord( 'D' ) ) &amp;&amp; !keyboard_check( ord( 'W' ) ) &amp;&amp; !keyboard_check( ord( 'S' ) ) ) {

        global.Player_Direction = 180;
        global.Player_Speed_Current = global.Player_Speed;
        if( !place_meeting( x + lengthdir_x( global.Player_Speed_Current, global.Player_Direction ), y + lengthdir_y( global.Player_Speed_Current, global.Player_Direction ), Object_Prop_Base ) ) {
    
            x += lengthdir_x( global.Player_Speed_Current, global.Player_Direction );
            y += lengthdir_y( global.Player_Speed_Current, global.Player_Direction );
        
        }

    }
    
}
    
if( ( !keyboard_check( ord( 'A' ) ) &amp;&amp; !keyboard_check( ord( 'D' ) ) &amp;&amp; !keyboard_check( ord( 'W' ) ) &amp;&amp; !keyboard_check( ord( 'S' ) ) ) || global.Player_Knockback == false ) { global.Player_Speed_Current = 0; }

x = round(x);
y = round(y);

depth = -y - 500;

global.Player_Mouse_Direction = point_direction( x, y, mouse_x, mouse_y );

//Status===========================================================================================================================================================================================================================================================\\

if( global.Player_Knockback == true ){
        
    friction = global.Player_Knockback_Resistance;
        
    if( speed = 0 ) {
        
        global.Player_Knockback = false;
        sprite_index = global.Player_Sprite;
        
    }
    
}

//Health===========================================================================================================================================================================================================================================================\\

if( global.Player_Healing == true ) {

    if( global.Player_Health + ( global.Player_Healing_Amount / global.Player_Healing_Time ) &gt;= global.Player_Health_Max ) {
    
        if( alarm[2] % 30 == 0 ) { with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Healing ) ) { Effect_Direction = 90 + random_range( -15, 15 ); } }
        global.Player_Health = global.Player_Health_Max;
    
    }
    else {
    
        if( alarm[2] % 30 == 0 ) { with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Healing ) ) { Effect_Direction = 90 + random_range( -15, 15 ); }  }
        global.Player_Health += global.Player_Healing_Amount / global.Player_Healing_Time;
        
    }

}

if( global.Player_Health &lt;= 0 ) { room_goto( room_over ); }

//Weapon===========================================================================================================================================================================================================================================================\\

if( mouse_check_button( mb_right ) &amp;&amp; global.Player_Weapon_Attack == false &amp;&amp; global.Player_Weapon_Charge = false &amp;&amp; global.Player_Skill_Block == true ) {

    global.Player_Weapon_Block = true;
    
    if( global.Player_Weapon_Block == false ) {
    
        Object_Player_Weapon.image_angle = 90;
        Object_Player_Weapon.image_xscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_yscale = -1; }
        else{ Object_Player_Weapon.image_yscale = 1; }

    }
    else{ 
    
        Object_Player_Weapon.image_angle = point_direction( x, y, mouse_x, mouse_y ) + 90;
        Object_Player_Weapon.image_yscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_xscale = -1; }
        else { Object_Player_Weapon.image_xscale = 1; }
        
    }

}

if( mouse_check_button_released( mb_right ) &amp;&amp; global.Player_Weapon_Attack == false &amp;&amp; global.Player_Weapon_Charge = false &amp;&amp; global.Player_Skill_Block == true ) {

    global.Player_Weapon_Block = false;
    
    if( global.Player_Weapon_Block == false ) {
    
        Object_Player_Weapon.image_angle = 90;
        Object_Player_Weapon.image_xscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_yscale = -1; }
        else{ Object_Player_Weapon.image_yscale = 1; }

    }
    else{ 
    
        Object_Player_Weapon.image_angle = point_direction( x, y, mouse_x, mouse_y ) + 90;
        Object_Player_Weapon.image_yscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_xscale = -1; }
        else { Object_Player_Weapon.image_xscale = 1; }
        
    }

}

if( mouse_check_button_pressed( mb_left ) &amp;&amp; global.Player_Weapon_Attack == false &amp;&amp; global.Player_Weapon_Block == false &amp;&amp; global.Player_Weapon_Charge = false ) {

    global.Player_Weapon_Attack = true;
    global.Player_Weapon_Charge = false;
    global.Player_Weapon_Block = false;
    global.Player_Weapon_Spread_Time = global.Player_Weapon_Spread / ( global.Player_Weapon_Speed / 2 );
    global.Player_Weapon_Recharge_Time = global.Player_Weapon_Spread / global.Player_Weapon_Recharge;
    global.Player_Weapon_Spread_Current = 0;
    global.Player_Weapon_Recharge_Current = 0;
    global.Camera_Shake += 2;
    alarm[0] = global.Player_Weapon_Speed;
    
    if( global.Player_Weapon_Block == false ) {
    
        Object_Player_Weapon.image_angle = 90;
        Object_Player_Weapon.image_xscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_yscale = -1; }
        else{ Object_Player_Weapon.image_yscale = 1; }

    }
    else{ 
    
        Object_Player_Weapon.image_angle = point_direction( x, y, mouse_x, mouse_y ) + 90;
        Object_Player_Weapon.image_yscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_xscale = -1; }
        else { Object_Player_Weapon.image_xscale = 1; }
        
    }

}

if( global.Player_Weapon_Attack == false &amp;&amp; global.Player_Weapon_Charge == false ) {

    if( global.Player_Weapon_Block == false ) {
    
        Object_Player_Weapon.image_angle = 90;
        Object_Player_Weapon.image_xscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_yscale = -1; }
        else{ Object_Player_Weapon.image_yscale = 1; }

    }
    else{ 
    
        Object_Player_Weapon.image_angle = point_direction( x, y, mouse_x, mouse_y ) + 90;
        Object_Player_Weapon.image_yscale = 1;
        if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) { Object_Player_Weapon.image_xscale = -1; }
        else { Object_Player_Weapon.image_xscale = 1; }
        
    }
    
    if( point_distance( x, y, mouse_x, mouse_y ) &gt; 16 ) { global.Player_Weapon_Distance = 16; }
    else { global.Player_Weapon_Distance = point_distance( x, y, mouse_x, mouse_y ) }

    Object_Player_Weapon.x = x + lengthdir_x( global.Player_Weapon_Distance, global.Player_Mouse_Direction );
    Object_Player_Weapon.y = y + lengthdir_y( global.Player_Weapon_Distance, global.Player_Mouse_Direction );
    
    if( global.Player_Mouse_Direction &gt; 90 &amp;&amp; global.Player_Mouse_Direction &lt;= 270 ) {
    
        global.Player_Weapon_Spread_Start = round( global.Player_Weapon_Spread_Start );
        global.Player_Weapon_Spread_End = round( global.Player_Weapon_Spread_End );
        global.Player_Weapon_Spread_Start = global.Player_Mouse_Direction - ( global.Player_Weapon_Spread / 2 );
        global.Player_Weapon_Spread_End = global.Player_Mouse_Direction + ( global.Player_Weapon_Spread / 2 );
    
    }
    else {

        global.Player_Weapon_Spread_Start = round( global.Player_Weapon_Spread_Start );
        global.Player_Weapon_Spread_End = round( global.Player_Weapon_Spread_End );
        global.Player_Weapon_Spread_Start = global.Player_Mouse_Direction + ( global.Player_Weapon_Spread / 2 );
        global.Player_Weapon_Spread_End = global.Player_Mouse_Direction - ( global.Player_Weapon_Spread / 2 );

    }

}
else {
    
    if( global.Player_Weapon_Charge == false ) {
    
        if( Object_Player_Weapon.image_yscale == -1 &amp;&amp; global.Player_Weapon_Spread_Current &gt; -90 ) { global.Player_Weapon_Spread_Current -= global.Player_Weapon_Spread_Time; }
        if( Object_Player_Weapon.image_yscale == 1 &amp;&amp; global.Player_Weapon_Spread_Current &lt; 90 ) { global.Player_Weapon_Spread_Current += global.Player_Weapon_Spread_Time; }
        global.Player_Weapon_Spread_Direction = lengthdir_x( global.Player_Weapon_Spread, 90 + global.Player_Weapon_Spread_Current );
        
        Object_Player_Weapon.x = x + lengthdir_x( global.Player_Weapon_Distance, global.Player_Weapon_Spread_Start + global.Player_Weapon_Spread_Direction );
        Object_Player_Weapon.y = y + lengthdir_y( global.Player_Weapon_Distance, global.Player_Weapon_Spread_Start + global.Player_Weapon_Spread_Direction );
        Object_Player_Weapon.image_angle = global.Player_Weapon_Spread_Start + global.Player_Weapon_Spread_Direction;
        
    }
    else {
    
        if( Object_Player_Weapon.image_yscale == -1 &amp;&amp; global.Player_Weapon_Recharge_Current &gt; -90 ) { global.Player_Weapon_Recharge_Current -= global.Player_Weapon_Recharge_Time; }
        if( Object_Player_Weapon.image_yscale == 1 &amp;&amp; global.Player_Weapon_Recharge_Current &lt; 90 ) { global.Player_Weapon_Recharge_Current += global.Player_Weapon_Recharge_Time; }
        global.Player_Weapon_Spread_Direction = lengthdir_x( global.Player_Weapon_Spread, 270 + global.Player_Weapon_Recharge_Current );
        
        Object_Player_Weapon.x = x + lengthdir_x( global.Player_Weapon_Distance, global.Player_Weapon_Spread_End + global.Player_Weapon_Spread_Direction );
        Object_Player_Weapon.y = y + lengthdir_y( global.Player_Weapon_Distance, global.Player_Weapon_Spread_End + global.Player_Weapon_Spread_Direction );
        Object_Player_Weapon.image_angle = global.Player_Weapon_Spread_End + global.Player_Weapon_Spread_Direction;
    
    }
    
}

Object_Player_Weapon.depth = -Object_Player_Weapon.y - 500;

//Sprite=============================================================================================================================================================================================================================================================\\

if( global.Player_Weapon_Attack == false &amp;&amp; global.Player_Weapon_Charge == false ) {

    if( global.Player_Mouse_Direction &gt; 0 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 45 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_45; }
    if( global.Player_Mouse_Direction &gt; 45 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 90 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_90; }
    if( global.Player_Mouse_Direction &gt; 90 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 135 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_135; }
    if( global.Player_Mouse_Direction &gt; 135 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 180 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_180; }
    if( global.Player_Mouse_Direction &gt; 180 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 225 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_225; }
    if( global.Player_Mouse_Direction &gt; 225 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 270 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_270; }
    if( global.Player_Mouse_Direction &gt; 270 + ( 45 / 2 ) &amp;&amp; global.Player_Mouse_Direction &lt;= 315 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_315; }
    if( global.Player_Mouse_Direction &gt; 315 + ( 45 / 2 ) || global.Player_Mouse_Direction &lt;= 0 + ( 45 / 2 ) ) { sprite_index = Sprite_Player_0; }
    
}

Object_Player_Weapon.sprite_index = global.Player_Weapon_HeldSprite;

//Inventory=============================================================================================================================================================================================================================================================\\

global.Player_Weapon_Name = global.Item[global.Equipment_Slot_Weapon,0];
global.Player_Weapon_Type = global.Item[global.Equipment_Slot_Weapon,1];
global.Player_Weapon_SubType = global.Item[global.Equipment_Slot_Weapon,2];
global.Player_Weapon_ItemSprite = global.Item[global.Equipment_Slot_Weapon,3];
global.Player_Weapon_HeldSprite = global.Item[global.Equipment_Slot_Weapon,4];
global.Player_Weapon_Damage = round( global.Item[global.Equipment_Slot_Weapon,5] * sqrt( global.Player_Strength ) * 100 ) / 100;
global.Player_Weapon_Range = global.Item[global.Equipment_Slot_Weapon,6];
global.Player_Weapon_Spread = global.Item[global.Equipment_Slot_Weapon,7];
global.Player_Weapon_Speed = global.Item[global.Equipment_Slot_Weapon,8];
global.Player_Weapon_Recharge = global.Item[global.Equipment_Slot_Weapon,9];


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Item_Exp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( other.Item_Spread == true ) {

    global.Player_Exp_Current += other.Item_Exp;
    with( other ) { instance_destroy(); }

    if( global.Player_Exp_Current &gt;= global.Player_Exp ) {

        global.Player_Exp_Current = 0;
        global.Player_Level++;
        global.Player_Stat_Point++;
        global.Player_Skill_Point++;
        global.Player_Exp = round( global.Player_Level * ( 100 + global.Player_Level - 1 ) + ( ( global.Player_Level * ( 100 + global.Player_Level - 1 ) ) * ( sqrt( global.Player_Level * ( 100 + global.Player_Level - 1 ) ) / 100 ) ) );
                
        var Ratio_Health = global.Player_Health / global.Player_Health_Max;
        global.Player_Health_Max = round( 50 + ( global.Player_Level * sqrt( 50 + global.Player_Level - 1 ) ) + sqrt( 50 * global.Player_Level * ( global.Player_Strength - 1 ) ) );
        global.Player_Health = round( global.Player_Health_Max * Ratio_Health * 10 ) / 10;
        
        var Ratio_Mana = global.Player_Mana / global.Player_Mana_Max;
        global.Player_Mana_Max = round( 10 + ( global.Player_Level * sqrt( 10 + global.Player_Level - 1 ) ) + sqrt( 50 * ( global.Player_Intelligence - 1 ) ) );
        global.Player_Mana = round( global.Player_Mana_Max * Ratio_Mana * 10 ) / 10;
        
        with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Text ) ) {
    
            Effect_Direction = 90 + random_range( -15, 15 );
            Effect_Font = font_add_sprite( Sprite_Font_15, ord( '!' ), true, 3 );
            Effect_Text = "Level Up";
            Effect_Color = c_yellow;
        
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Item_Base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( other.Item_Spread == true ) {

    var Check = false;
    var Type = global.Item[other.Item_Number,1];

    for( var i = 0; i &lt; global.UI_Inventory_Size_Height; i++ ) {

        for( var j = 0; j &lt; global.UI_Inventory_Size_Width; j++ ) {
            
            switch( Type ) {
            
                case "Misc" :
                
                    if( global.Inventory_Slot_Misc[i,j] == noone || global.Inventory_Slot_Misc[i,j] == other.Item_Number ) {
        
                        if( global.Inventory_Slot_Misc[i,j] == noone ) {
            
                            global.Inventory_Slot_Misc[i,j] = other.Item_Number;
                            global.Inventory_Slot_Misc_Amount[i,j] = 1;
            
                        }
                        else{ global.Inventory_Slot_Misc_Amount[i,j]++; }
                        Check = true;
                        
                    }
                    break;
                    
                case "Potion" : case "Food" :
                
                    if( global.Inventory_Slot_Consumable[i,j] == noone || global.Inventory_Slot_Consumable[i,j] == other.Item_Number ) {
        
                        if( global.Inventory_Slot_Consumable[i,j] == noone ) {
            
                            global.Inventory_Slot_Consumable[i,j] = other.Item_Number;
                            global.Inventory_Slot_Consumable_Amount[i,j] = 1;
            
                        }
                        else{ global.Inventory_Slot_Consumable_Amount[i,j]++; }
                        Check = true;
                        
                    }
                    break;
                    
                case "Melee" : case "Ranged" :
                
                    if( global.Inventory_Slot_Equipment[i,j] == noone ) {

                        global.Inventory_Slot_Equipment[i,j] = other.Item_Number;
                        Check = true;
                        
                    }
                    break;
                    
                    
            }
            if( Check == true ) { break; }
    
        }
    
        if( Check == true ) { break; }
    
    }

    if( Check == true ) { with( other ) { instance_destroy(); } }
    
    if( Check == false ) {

        with( other ) {
        
            Item_Spread = false;
            motion_add( random(360), random( 10 ) );

        }

    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Prop_Base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.Player_Knockback == true ){
        
    move_bounce_solid( false );
    friction = global.Player_Knockback_Resistance;
        
    if( speed = 0 ) {
        
        global.Player_Knockback = false;
        sprite_index = global.Player_Sprite;
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Enemy_Projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Player_Knockback = true;
sprite_index = global.Player_Sprite_Hit;
    
var Knockback = other.Projectile_Power * ( other.speed / other.Projectile_Speed );

if( global.Player_Weapon_Block == false ) {
    
    global.Player_Damaged = other.Projectile_Damage * ( other.speed / other.Projectile_Speed ) - global.Player_Defence + random( other.Projectile_Damage * 0.05 );
        
    if( Knockback &gt; 10 ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 ); }
    else { motion_set( point_direction( x, y, other.x, other.y ) - 180, Knockback ); }
        
}
else{
    
    global.Player_Damaged = other.Projectile_Damage + random( other.Projectile_Damage * 0.05 ) - ( round( global.Player_Defence * sqrt( 1 + global.Player_Skill_Block_Level ) * 100 ) / 100 );
        
    if( Knockback / ( 1 + global.Player_Knockback_Resistance ) &gt; 10 / ( 1 + global.Player_Knockback_Resistance ) ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 / ( 1 + global.Player_Knockback_Resistance ) ); }
    else { motion_set( point_direction( x, y, other.x, other.y ) - 180, Knockback / ( 1 + global.Player_Knockback_Resistance ) ); }
    
}
    
if( global.Player_Damaged &lt; 1 ) { global.Player_Damaged = 1; }
global.Player_Health -= global.Player_Damaged;
global.Player_Healing = false;
    
other.Enemy_Attack_Id = id;
    
global.Camera_Shake += 10 * ( global.Player_Damaged / global.Player_Health_Max );
global.Camera_Shake += Knockback / ( 1 + global.Player_Knockback_Resistance );
    
with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Text ) ) {
    
    Effect_Direction = 90 + random_range( -15, 15 );
    Effect_Font = font_add_sprite( Sprite_Font_5, ord( '!' ), true, 1 );
    Effect_Text = string( global.Player_Damaged );
    Effect_Color = c_red;
        
}
    
alarm[2] = -1;

with( other ) { instance_destroy(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Object_Enemy_Base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( other.Enemy_Attack_Charge == true &amp;&amp; other.Enemy_Attack == true &amp;&amp; other.Enemy_Charge == true &amp;&amp; other.Enemy_Attack_Id != id ) {

    global.Player_Knockback = true;
    sprite_index = global.Player_Sprite_Hit;
    
    if( global.Player_Weapon_Block == false ) {
    
        global.Player_Damaged = other.Enemy_Charge_Damage + random( other.Enemy_Charge_Damage * 0.05 ) - global.Player_Defence;
        
        if( other.Enemy_Charge_Power &gt; 10 ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 ); }
        else { motion_set( point_direction( x, y, other.x, other.y ) - 180, other.Enemy_Charge_Power ); }
        
    }
    else{
    
        global.Player_Damaged = other.Enemy_Charge_Damage + random( other.Enemy_Charge_Damage * 0.05 ) - ( round( global.Player_Defence * sqrt( 1 + global.Player_Skill_Block_Level ) * 100 ) / 100 );
        
        if( other.Enemy_Charge_Power / ( 1 + global.Player_Knockback_Resistance ) &gt; 10 / ( 1 + global.Player_Knockback_Resistance ) ) { motion_set( point_direction( x, y, other.x, other.y ) - 180, 10 / ( 1 + global.Player_Knockback_Resistance ) ); }
        else { motion_set( point_direction( x, y, other.x, other.y ) - 180, other.Enemy_Charge_Power / ( 1 + global.Player_Knockback_Resistance ) ); }
    
    }
    
    if( global.Player_Damaged &lt; 1 ) { global.Player_Damaged = 1; }
    global.Player_Health -= global.Player_Damaged;
    global.Player_Healing = false;
    
    other.Enemy_Attack_Id = id;
    
    global.Camera_Shake += 10 * ( global.Player_Damaged / global.Player_Health_Max );
    global.Camera_Shake += other.Enemy_Charge_Power / ( 1 + global.Player_Knockback_Resistance );
    
    with( instance_create( x + random_range( -5, 5 ), y + random_range( -5, 5 ), Object_Effect_Text ) ) {
    
        Effect_Direction = 90 + random_range( -15, 15 );
        Effect_Font = font_add_sprite( Sprite_Font_5, ord( '!' ), true, 1 );
        Effect_Text = string( global.Player_Damaged );
        Effect_Color = c_red;
        
    }
    
    alarm[2] = -1;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha( 0.2 );
draw_circle( x, y, global.Player_Weapon_Distance, true );
draw_circle( x, y, global.Player_Weapon_Distance + global.Player_Weapon_Range, true );
draw_line( x + lengthdir_x( global.Player_Weapon_Distance, global.Player_Weapon_Spread_Start ), y + lengthdir_y( global.Player_Weapon_Distance, global.Player_Weapon_Spread_Start ), x + lengthdir_x( global.Player_Weapon_Distance + global.Player_Weapon_Range, global.Player_Weapon_Spread_Start ), y + lengthdir_y( global.Player_Weapon_Distance + global.Player_Weapon_Range, global.Player_Weapon_Spread_Start ) );
draw_line( x + lengthdir_x( global.Player_Weapon_Distance, global.Player_Weapon_Spread_End ), y + lengthdir_y( global.Player_Weapon_Distance, global.Player_Weapon_Spread_End ), x + lengthdir_x( global.Player_Weapon_Distance + global.Player_Weapon_Range, global.Player_Weapon_Spread_End ), y + lengthdir_y( global.Player_Weapon_Distance + global.Player_Weapon_Range, global.Player_Weapon_Spread_End ) );
if( alarm[1] != -1 ) { draw_line_colour( x + lengthdir_x ( global.Player_Weapon_Distance, ( -alarm[1] / global.Player_Weapon_Recharge ) * 360 + 90 ), y + lengthdir_y ( global.Player_Weapon_Distance, ( -alarm[1] / global.Player_Weapon_Recharge ) * 360 + 90 ), x + lengthdir_x ( global.Player_Weapon_Distance + global.Player_Weapon_Range, ( -alarm[1] / global.Player_Weapon_Recharge ) * 360 + 90 ), y + lengthdir_y ( global.Player_Weapon_Distance + global.Player_Weapon_Range, ( -alarm[1] / global.Player_Weapon_Recharge ) * 360 + 90 ), c_red, c_red ); }
if( alarm[0] != -1 ) { draw_line_colour( x + lengthdir_x ( global.Player_Weapon_Distance, ( -alarm[0] / global.Player_Weapon_Speed ) * 360 + 90 ), y + lengthdir_y ( global.Player_Weapon_Distance, ( -alarm[0] / global.Player_Weapon_Speed ) * 360 + 90 ), x + lengthdir_x ( global.Player_Weapon_Distance + global.Player_Weapon_Range, ( -alarm[0] / global.Player_Weapon_Speed ) * 360 + 90 ), y + lengthdir_y ( global.Player_Weapon_Distance + global.Player_Weapon_Range, ( -alarm[0] / global.Player_Weapon_Speed ) * 360 + 90 ), c_red, c_red ); }
draw_sprite_ext( sprite_index, -1, x, y + ( sprite_height / 2 ), 1, 0.2, 0, c_black, 0.2 );
draw_set_alpha( 1 );
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
