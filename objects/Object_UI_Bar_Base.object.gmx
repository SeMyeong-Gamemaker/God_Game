<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Bar_Font = font_add_sprite( Sprite_Font_10, ord( '!' ), true, 1 );
Bar_Move = false;

Click_X = 0;
Click_Y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch( Bar_Type ) {

    case "Inventory" :

        if( Bar_Move == false ) {

            x = view_xview[0] + global.UI_Inventory_X + UI_X;
            y = view_yview[0] + global.UI_Inventory_Y + UI_Y;
    
        }
        else {

            x = mouse_x - Click_X;
            y = mouse_y - Click_Y;
    
            if( x + ( 32 * 5 ) &gt; view_xview[0] + view_wview[0] ) { x = view_xview[0] + view_wview[0] - ( 32 * global.UI_Inventory_Size_Width ); }
            if( y + 16 + ( 32 * 5 ) &gt; view_yview[0] + view_hview[0] ) { y = view_yview[0] + view_hview[0] - 16 - ( 32 * global.UI_Inventory_Size_Height ); }
            if( x &lt; view_xview[0] ) { x = view_xview[0] } 
            if( y &lt; view_yview[0] ) { y = view_yview[0] }

            Object_UI_Inventory.x = x;
            Object_UI_Inventory.y = y;
    
            global.UI_Inventory_X = Object_UI_Inventory.x - view_xview[0];
            global.UI_Inventory_Y = Object_UI_Inventory.y - view_yview[0];
    
            for( Inventory_Size_Width = 0; Inventory_Size_Width &lt; global.UI_Inventory_Size_Width; Inventory_Size_Width++ ) {

                for( Inventory_Size_Height = 0; Inventory_Size_Height &lt; global.UI_Inventory_Size_Height; Inventory_Size_Height++ ) {
    
                    with( global.Inventory_Slot_ID[Inventory_Size_Width,Inventory_Size_Height] ) {
        
                        x = view_xview[0] + global.UI_Inventory_X + Slot_X;
                        y = view_yview[0] + global.UI_Inventory_Y + Slot_Y;
                
                    }

    
                }
    
            }
    
            with( Object_UI_Inventory ) {
    
                with( Object_UI_Inventory_Equipment ) {
                
                    x = view_xview[0] + global.UI_Inventory_X + UI_X;
                    y = view_yview[0] + global.UI_Inventory_Y + UI_Y;
                    
                }
                
                with( Object_UI_Inventory_Consumable ) {
                
                    x = view_xview[0] + global.UI_Inventory_X + UI_X;
                    y = view_yview[0] + global.UI_Inventory_Y + UI_Y;
                    
                }
                
                with( Object_UI_Inventory_Misc ) {
                
                    x = view_xview[0] + global.UI_Inventory_X + UI_X;
                    y = view_yview[0] + global.UI_Inventory_Y + UI_Y;
                    
                }
                
    
            }
            
            with( Close_ID ) {
    
                x = view_xview[0] + global.UI_Inventory_X + UI_X;
                y = view_yview[0] + global.UI_Inventory_Y + UI_Y;
    
            }

        }
        break;
        
    case "Stat" :
    
        if( Bar_Move == false ) {

            x = view_xview[0] + global.UI_Stat_X + UI_X;
            y = view_yview[0] + global.UI_Stat_Y + UI_Y;
    
        }
        else {

            x = mouse_x - Click_X;
            y = mouse_y - Click_Y;
    
            if( x + 192 &gt; view_xview[0] + view_wview[0] ) { x = view_xview[0] + view_wview[0] - 192; }
            if( y + 16 + 96 &gt; view_yview[0] + view_hview[0] ) { y = view_yview[0] + view_hview[0] - 16 - 96; }
            if( x &lt; view_xview[0] ) { x = view_xview[0] } 
            if( y &lt; view_yview[0] ) { y = view_yview[0] }

            Object_UI_Stat.x = x;
            Object_UI_Stat.y = y;
    
            global.UI_Stat_X = Object_UI_Stat.x - view_xview[0];
            global.UI_Stat_Y = Object_UI_Stat.y - view_yview[0];
            
            with( Object_UI_Stat ) {
    
                with( Stat_Strength_ID ) {
                
                    x = view_xview[0] + global.UI_Stat_X + Stat_X;
                    y = view_yview[0] + global.UI_Stat_Y + Stat_Y;
                    
                }
                with( Stat_Agility_ID ) 
                {                 
                    x = view_xview[0] + global.UI_Stat_X + Stat_X;
                    y = view_yview[0] + global.UI_Stat_Y + Stat_Y;
                    
                }
                with( Stat_Intelligence_ID ) {
                                
                    x = view_xview[0] + global.UI_Stat_X + Stat_X;
                    y = view_yview[0] + global.UI_Stat_Y + Stat_Y;
                    
                }
                with( Stat_Luck_ID ) {   
                              
                    x = view_xview[0] + global.UI_Stat_X + Stat_X;
                    y = view_yview[0] + global.UI_Stat_Y + Stat_Y;
                    
                }
                with( Base_ID ) {   
                              
                    x = view_xview[0] + global.UI_Stat_X + Stat_X;
                    y = view_yview[0] + global.UI_Stat_Y + Stat_Y;
                    
                }
    
            }
            
            with( Close_ID ) {
    
                x = view_xview[0] + global.UI_Stat_X + UI_X;
                y = view_yview[0] + global.UI_Stat_Y + UI_Y;
    
            }

        }
        break;
        
    case "Skill" :
    
        if( Bar_Move == false ) {

            x = view_xview[0] + global.UI_Skill_X + UI_X;
            y = view_yview[0] + global.UI_Skill_Y + UI_Y;
    
        }
        else {

            x = mouse_x - Click_X;
            y = mouse_y - Click_Y;
    
            if( x + 160 &gt; view_xview[0] + view_wview[0] ) { x = view_xview[0] + view_wview[0] - 160; }
            if( y + 16 + 288 &gt; view_yview[0] + view_hview[0] ) { y = view_yview[0] + view_hview[0] - 16 - 288; }
            if( x &lt; view_xview[0] ) { x = view_xview[0] } 
            if( y &lt; view_yview[0] ) { y = view_yview[0] }

            Object_UI_Skill.x = x;
            Object_UI_Skill.y = y;
    
            global.UI_Skill_X = Object_UI_Skill.x - view_xview[0];
            global.UI_Skill_Y = Object_UI_Skill.y - view_yview[0];
            
            with( Object_UI_Skill ) {
    
                with( Skill_Block_ID ) {
                
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
                with( Skill_Bash_ID ) {
                
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
                with( Skill_Charge_ID ) {
                
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
                with( Skill_Critical_ID ) {
                
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
                with( Skill_CostCut_ID ) {
                
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
                with( Base_ID ) {   
                              
                    x = view_xview[0] + global.UI_Skill_X + Skill_X;
                    y = view_yview[0] + global.UI_Skill_Y + Skill_Y;
                    
                }
    
            }
            
            with( Close_ID ) {
    
                x = view_xview[0] + global.UI_Skill_X + UI_X;
                y = view_yview[0] + global.UI_Skill_Y + UI_Y;
    
            }

        }
        break;
            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Bar_Move = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Bar_Move = true;

Click_X = mouse_x - x;
Click_Y = mouse_y - y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha( 1 );
draw_self();
draw_set_valign( fa_middle );
draw_set_halign( fa_left );
draw_set_font( Bar_Font );
draw_text_colour( x + ( sprite_height / 2 ), y + ( sprite_height / 2 ), Bar_Type, c_white, c_white, c_white, c_white, 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
